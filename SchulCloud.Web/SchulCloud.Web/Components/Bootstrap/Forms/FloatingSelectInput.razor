@typeparam TValue
@inherits FloatingInputBase<TValue>

<div class="@ClassNames" style="@StyleNames">
    <select class="@($"{ExtendedBootstrapClass.FormSelect} {FieldCssClass}".Trim())" id="@Id" @onchange="OnSelectionChangedAsync" @attributes="AdditionalAttributes">
        @if (DefaultTemplate is not null)
        {
            <option @attributes="@([ new KeyValuePair<string, object>("selected", Value is null) ])" disabled>
                @DefaultTemplate
            </option>
        }

        @foreach (TValue value in Values)
        {
            IEnumerable<KeyValuePair<string, object>> attributes =
            [
                new KeyValuePair<string, object>("selected", value!.Equals(Value)!),
                new KeyValuePair<string, object>("disabled", DisabledValues.Contains(value))
            ];
            <option value="@IdSelector(value)" @attributes="attributes">
                @if (ItemTemplate is not null)
                {
                    @ItemTemplate(value)
                }
                else
                {
                    @value?.ToString()
                }
            </option>
        }
    </select>
    <label for="@Id">@FloatingLabel</label>

    @if (ShowValidationFeedback)
    {
        <BsValidationFeedback Identifier="_fieldIdentifier" />
    }
</div>