@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using SchulCloud.Server.Enums
@using SchulCloud.Server.Options
@using System.Globalization;
@using SchulCloud.Server.Utils.Interfaces
@using System.Collections.Immutable

@inherits LayoutComponentBase

@attribute [AllowAnonymous]

@inject IStringLocalizer<AnonLayout> Localizer
@inject ILocalStorageService BrowserStorage
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject IOptions<SchulCloud.Server.Options.LocalizationOptions> LocalizationOptionsAccessor
@inject IOptionsSnapshot<PresentationOptions> PresentationOptionsAccessor
@inject ICookieHelper CookieHelper
@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">@PresentationOptionsAccessor.Value.ApplicationName</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <div class="w-100 d-flex justify-content-between">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <NavLink class="d-flex nav-link mx-2" href="/auth/signIn">
                            <FontsIcon Name="login" />
                            <span class="ms-2">@Localizer["signInBtn"]</span>
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="d-flex nav-link mx-1" href="/auth/register">
                            <FontsIcon Name="person_add" />
                            <span class="ms-2">@Localizer["registerBtn"]</span>
                        </NavLink>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <Dropdown>
                            <DropdownToggleButton Class="d-flex align-items-center">
                                @if (_activeCulture is null)
                                {
                                    <FontsIcon Name="language" />
                                    <span class="ms-2">@Localizer["cultureAuto"]</span>
                                }
                                else
                                {
                                    <img src="/static/img/flag.@(_activeCulture).svg" width="32px" />
                                    <span class="ms-2">@_activeCulture.DisplayName</span>
                                }
                            </DropdownToggleButton>

                            <DropdownMenu Position="DropdownMenuPosition.End">
                                <DropdownItem Type="DropdownItemType.Button" Class="d-flex align-item-center" Active="_activeCulture is null" @onclick="@(() => CultureChange_ClickAsync(null))">
                                    <FontsIcon Name="language" />
                                    <span class="mx-1">@Localizer["cultureAuto"]</span>
                                </DropdownItem>
                                <DropdownDivider/>
                                
                                @foreach (CultureInfo culture in LocalizationOptionsAccessor.Value.SupportedCultures.Select(c => new CultureInfo(c)))
                                {
                                    <DropdownItem Type="DropdownItemType.Button" Active="_activeCulture?.Equals(culture) ?? false" @onclick="@(() => CultureChange_ClickAsync(culture))">
                                        <img src="/static/img/flag.@(culture.Name).svg" width="32px" />
                                        <span class="ms-2">@culture.DisplayName</span>
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </li>
                    <li class="nav-item">
                        <Dropdown>
                            <DropdownToggleButton Class="d-flex align-items-center">
                                @{
                                    string themeName = _activeColorTheme.ToString();
                                    string iconName = _activeColorTheme switch
                                    {
                                        ColorTheme.Auto => "contrast",
                                        _ => themeName.ToLower() + "_mode"
                                    };
                                }
                                <FontsIcon Name="@iconName" />
                                <span class="ms-2">@Localizer["theme" + themeName]</span>
                            </DropdownToggleButton>

                            <DropdownMenu Position="DropdownMenuPosition.End">
                                <div class="d-flex align-items-center">
                                    <DropdownItem Type="DropdownItemType.Button" Class="d-flex align-items-center" Active="_activeColorTheme == ColorTheme.Auto" Disabled="!_autoModeAvailable"
                                                  @onclick="@(() => ColorThemeChange_ClickAsync(ColorTheme.Auto))">
                                        <FontsIcon Name="contrast" />
                                        <span class="ms-2">@Localizer["themeAuto"]</span>
                                    </DropdownItem>

                                    @if (!_autoModeAvailable)
                                    {
                                        <Tooltip Title="@Localizer["themeAuto_NotSupported"]" Class="d-flex align-items-center me-1">
                                            <FontsIcon Name="help" />
                                        </Tooltip>
                                    }
                                </div>
                                <DropdownDivider />

                                <DropdownItem Type="DropdownItemType.Button" Class="d-flex align-items-center" Active="_activeColorTheme == ColorTheme.Light" @onclick="@(() => ColorThemeChange_ClickAsync(ColorTheme.Light))">
                                    <FontsIcon Name="light_mode" />
                                    <span class="ms-2">@Localizer["themeLight"]</span>
                                </DropdownItem>
                                <DropdownItem Type="DropdownItemType.Button" Class="d-flex align-items-center" Active="_activeColorTheme == ColorTheme.Dark" @onclick="@(() => ColorThemeChange_ClickAsync(ColorTheme.Dark))">
                                    <FontsIcon Name="dark_mode" />
                                    <span class="ms-2">@Localizer["themeDark"]</span>
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</nav>
<main class="h-auto">
    @Body
</main>

@code {
    private CultureInfo? _activeCulture;

    private ColorTheme _activeColorTheme;

    private bool _autoModeAvailable = true;

    private const string ThemeKey = ".AspNetCore.Theme";

    protected override void OnInitialized()
    {
        string? cultureCookieValue = HttpContextAccessor.HttpContext?.Request.Cookies[CookieRequestCultureProvider.DefaultCookieName];
        if (!string.IsNullOrEmpty(cultureCookieValue))
        {
            _activeCulture = Thread.CurrentThread.CurrentUICulture;
        }

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _autoModeAvailable = await JSRuntime.InvokeAsync<bool>("autoColorThemeAvailable");

            ColorTheme theme = await BrowserStorage.GetItemAsync<ColorTheme>(ThemeKey);
            if (theme == ColorTheme.Auto && !_autoModeAvailable)
            {
                _activeColorTheme = ColorTheme.Light;
            }
            else
            {
                _activeColorTheme = theme;
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CultureChange_ClickAsync(CultureInfo? culture)
    {
        if (_activeCulture?.Name == culture?.Name)
        {
            return;
        }

        if (culture is not null)
        {
            CookieOptions options = new() { MaxAge = TimeSpan.FromDays(400) };

            string cookieValue = CookieRequestCultureProvider.MakeCookieValue(new(culture));
            await CookieHelper.SetCookieAsync(CookieRequestCultureProvider.DefaultCookieName, cookieValue, options);
        }
        else
        {
            await CookieHelper.RemoveCookieAsync(CookieRequestCultureProvider.DefaultCookieName);
        }

        _activeCulture = culture;

        NavigationManager.Refresh(forceReload: true);
    }

    private async Task ColorThemeChange_ClickAsync(ColorTheme theme)
    {
        if (_activeColorTheme == theme)
        {
            return;
        }

        if (theme == ColorTheme.Auto)
        {
            await BrowserStorage.RemoveItemAsync(ThemeKey);
        }
        else
        {
            await BrowserStorage.SetItemAsync(ThemeKey, theme);
        }

        await DisplayColorThemeAsync(theme);
    }

    private async ValueTask DisplayColorThemeAsync(ColorTheme theme)
    {
        if (!_autoModeAvailable && theme == ColorTheme.Auto)
        {
            theme = ColorTheme.Light;
        }

        _activeColorTheme = theme;
        await JSRuntime.InvokeVoidAsync("setTheme", theme.ToString().ToLower());
    }

    private string IsActiveElement(object? element, object? otherElement)
    {
        if (element?.Equals(otherElement) ?? otherElement is null)
        {
            return " active";
        }
        return string.Empty;
    }
}