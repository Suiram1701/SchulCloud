@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using SchulCloud.Database.Models
@using SchulCloud.Server.Extensions
@using SchulCloud.Server.Models
@using System.Security.Claims

@implements IAsyncDisposable

@inject IStringLocalizer<PasswordChangeModal> Localizer
@inject IPasswordValidator<User> PasswordValidator
@inject UserManager<User> UserManager
@inject IdentityErrorDescriber ErrorDescriber
@inject ToastService ToastService

<Modal @ref="Modal" Title="@Localizer["modalTitle"]" HeaderCssClass="bg-body text-light-emphasis" ShowCloseButton="false" UseStaticBackdrop>
    <BodyTemplate>
        <EditForm EditContext="_editContext">
            <EditFormValidator For="() => Model.CurrentPassword" ValidateAsync="ValidateCurrentPasswordAsync" />
            <FloatingPasswordInput OuterClass="mb-3" @bind-Value="Model.CurrentPassword" For="() => Model.CurrentPassword" FloatingLabel="@Localizer["currentPassword_Placeholder"]" Placeholder="password" autocomplete="current-password" required />

            <EditFormValidator For="() => Model.NewPassword" ValidateAsync="ValidateNewPasswordAsync" />
            <FloatingPasswordInput OuterClass="mb-3" @bind-Value="Model.NewPassword" For="() => Model.NewPassword" FloatingLabel="@Localizer["newPassword_Placeholder"]" Placeholder="newPassword" autocomplete="new-password" required />

            <EditFormValidator For="() => Model.ConfirmedPassword" ValidateAsync="ValidateConfirmedPasswordAsync" />
            <FloatingPasswordInput @bind-Value="Model.ConfirmedPassword" For="() => Model.ConfirmedPassword" FloatingLabel="@Localizer["confirmedPassword_Placeholder"]" Placeholder="newPassword" autocomplete="confirmed-password" required />
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseModal_ClickAsync">@Localizer["abort"]</Button>
        <Button Color="ButtonColor.Primary" @onclick="ChangePassword_ClickAsync">@Localizer["submit"]</Button>
    </FooterTemplate>
</Modal>

@code {
    private EditContext _editContext = default!;

    private User _user = default!;

    public Modal Modal { get; set; } = default!;

    public PasswordChangeModel Model { get; set; } = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new(Model);
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState.ConfigureAwait(false);
        _user = (await UserManager.GetUserAsync(state.User).ConfigureAwait(false))!;
    }

    private async Task<IEnumerable<string>> ValidateCurrentPasswordAsync()
    {
        if (!await UserManager.CheckPasswordAsync(_user, Model.CurrentPassword).ConfigureAwait(false))
        {
            return [ErrorDescriber.PasswordMismatch().Description];
        }

        return [];
    }

    private async Task<IEnumerable<string>> ValidateNewPasswordAsync()
    {
        IdentityResult result = await PasswordValidator.ValidateAsync(UserManager, _user, Model.NewPassword).ConfigureAwait(false);
        if (!result.Succeeded)
        {
            return result.Errors.Select(err => err.Description);
        }

        return [];
    }

    private Task<IEnumerable<string>> ValidateConfirmedPasswordAsync()
    {
        if (!Model.NewPassword.Equals(Model.ConfirmedPassword))
        {
            return Task.FromResult<IEnumerable<string>>([ Localizer["confirmedPassword_DoesNotMatch"].Value ]);
        }

        return Task.FromResult<IEnumerable<string>>([]);
    }

    private async Task CloseModal_ClickAsync()
    {
        await Modal.HideAsync().ConfigureAwait(false);
    }

    private async Task ChangePassword_ClickAsync()
    {
        if (!_editContext.Validate())
        {
            return;
        }

        IdentityResult result = await UserManager.ChangePasswordAsync(_user, Model.CurrentPassword, Model.NewPassword).ConfigureAwait(true);     // The original context is required here because the ToastService needs a synchronized context.
        if (result.Succeeded)
        {
            Model = new();

            ToastService.NotifySuccess(Localizer["successToast_Title"], Localizer["successToast_Message"]);
            await Modal.HideAsync().ConfigureAwait(false);
        }
        else
        {
            ToastService.NotifyError(result.Errors, Localizer["errorToast_Title"]);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await Modal.DisposeAsync().ConfigureAwait(false);
    }
}
