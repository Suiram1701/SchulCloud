@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization;
@using Microsoft.Extensions.Options
@using SchulCloud.Database.Models
@using System.Text;
@using System.Runtime.CompilerServices
@using SchulCloud.Server.Components.Modals

@page "/account/security"
@rendermode InteractiveServer

@attribute [Authorize]

@inject IStringLocalizer<Security> _localizer
@inject IOptions<PasswordOptions> _passwdOptions
@inject IdentityErrorDescriber _errorDescriber

<SchulCloudPageTitle Title="@_localizer["title"]" />

<div class="d-flex flex-column mt-3">
    <h3 class="text-center">@_localizer["tabHeader"]</h3>

    <div class="mt-4 mx-3 d-flex flex-column justify-content-center">
        <Tabs Class="justify-content-center" EnableFadeEffect>
            <Tab Title="@_localizer["tabMethods"]">
                <Content>
                    <Accordion Class="mt-2" AlwaysOpen>
                        <AccordionItem>
                            <TitleTemplate>
                                <div class="d-flex justify-content-between align-items-center flex-fill">
                                    <div class="d-flex align-items-center">
                                        <FontsIcon Name="password" />
                                        <span class="ms-3">@_localizer["methodPassword"]</span>
                                    </div>

                                    @{
                                        DateTimeOffset lastSignIn = DateTimeOffset.Now.AddHours(-1);     @* This value is only a placeholder for the further implementation. *@
                                    }
                                    <span class="mx-2">@_localizer["method_LastSignIn", lastSignIn.Humanize()]</span>
                                </div>
                            </TitleTemplate>
                            <Content>
                                @{
                                    PasswordOptions options = _passwdOptions.Value;

                                    string? ShowWhenTrue(bool condition, Func<IdentityError> errorProvider)
                                    {
                                        if (condition)
                                        {
                                            @errorProvider().Description
                                        }

                                        return null;
                                    }
                                }

                                <p>@_localizer["methodPassword_Desc"]</p>
                                <p class="lh-base">
                                    @_errorDescriber.PasswordTooShort(options.RequiredLength).Description<br />
                                    @_errorDescriber.PasswordRequiresUniqueChars(options.RequiredUniqueChars).Description<br />
                                    @ShowWhenTrue(options.RequireNonAlphanumeric, _errorDescriber.PasswordRequiresNonAlphanumeric)<br />
                                    @ShowWhenTrue(options.RequireLowercase, _errorDescriber.PasswordRequiresLower)<br />
                                    @ShowWhenTrue(options.RequireUppercase, _errorDescriber.PasswordRequiresUpper)<br />
                                    @ShowWhenTrue(options.RequireDigit, _errorDescriber.PasswordRequiresDigit)
                                </p>

                                <Button Color="ButtonColor.Primary" @onclick="PasswordChange_ClickAsync">@_localizer["methodPassword_Change"]</Button>
                            </Content>
                        </AccordionItem>
                    </Accordion>
                </Content>
            </Tab>

            <Tab Title="@_localizer["tabMfa"]">
                <Content>
                    Mfa
                </Content>
            </Tab>
        </Tabs>
    </div>
</div>

<PasswordChangeModal @ref="_passwordChangeModal"/>

@code {
    private PasswordChangeModal _passwordChangeModal = default!;

    private async Task PasswordChange_ClickAsync()
    {
        await _passwordChangeModal.Modal.ShowAsync().ConfigureAwait(false);
    }
}
