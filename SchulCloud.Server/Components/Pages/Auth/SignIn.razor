@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.DataProtection
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using SchulCloud.Database.Models
@using SchulCloud.Server.Enums
@using SchulCloud.Server.Models
@using SchulCloud.Server.Utils.Interfaces
@using System.Security.Claims

@implements IDisposable

@page "/auth/signIn"
@rendermode InteractiveServer

@attribute [AllowAnonymous]

@inject IStringLocalizer<SignIn> Localizer
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@inject PersistentComponentState ComponentState

<SchulCloudPageTitle Title="@Localizer["title"]" />

<HeadContent>
    <style>
        div.usr-group input {
            border-bottom-left-radius: 0px !important;
            border-bottom-right-radius: 0px !important;
        }

        div.pwd-group input {
            border-top-left-radius: 0px !important;
            border-top-right-radius: 0px !important;
        }

        div.pwd-group span {
            border-top-right-radius: 0px !important;
        }

        form.form-invalid div.usr-group input {
            border-top-color: var(--bs-form-invalid-border-color) !important;
            border-left-color: var(--bs-form-invalid-border-color) !important;
            border-right-color: var(--bs-form-invalid-border-color) !important;
        }

        form.form-invalid div.pwd-group input {
            border-left-color: var(--bs-form-invalid-border-color) !important;
            border-bottom-color: var(--bs-form-invalid-border-color) !important;
        }

        form.form-invalid div.pwd-group span {
            border-right-color: var(--bs-form-invalid-border-color) !important;
            border-bottom-color: var(--bs-form-invalid-border-color) !important;
        }

        div.pwd-group {
            margin-top: -1px;
        }
    </style>
</HeadContent>

<div class="container py-5 my-5">
    <div class="row mb-2">
        <div class="col" />
        <div class="col-6">
            <h3>@Localizer["formHeader"]</h3>
        </div>
        <div class="col" />
    </div>
    <div class="row">
        <div class="col" />
        <div class="col-6">
            <form @formname="signIn" class="@InvalidClass()" method="post" action="@NavigationManager.Uri">
                <input type="hidden" name="_handler" value="signIn" />     @* I have to place this hidden field by manual because in interactive SSR Blazor doesn't place it by its own. *@
                <AntiforgeryToken />

                <FloatingTextInput Class="usr-group" @bind-Value="Model.User" @bind-Value:after="Input_Changed" name="@($"{nameof(Model)}.{nameof(Model.User)}")"
                                   FloatingLabel="@Localizer["formUserPlaceholder"]" Placeholder="exampleUser" autocomplete="username" required />

                <FloatingPasswordInput Class="pwd-group" @bind-Value="Model.Password" @bind-Value:after="Input_Changed" name="@($"{nameof(Model)}.{nameof(Model.Password)}")"
                                       FloatingLabel="@Localizer["formPasswordPlaceholder"]" Placeholder="password" autocomplete="current-password" required />

                @if (IsInvalid())
                {
                    <div class="invalid-feedback d-block">@_errorMessage</div>
                }

                <CheckBoxInput Class="my-3" @bind-Value="Model.RememberMe" name="@($"{nameof(Model)}.{nameof(Model.RememberMe)}")" Label="@Localizer["formPersistent"]" />

                <Button Class="w-100" Color="ButtonColor.Primary" Type="ButtonType.Submit">@Localizer["formSubmit"]</Button>
            </form>
        </div>
        <div class="col" />
    </div>
</div>

@code {
    private string? _errorMessage;

    private PersistingComponentStateSubscription? _persistingSubscription;

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public SignInModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Make sure that every auth cookie is cleaned up if present.
        AuthenticationState state = await AuthenticationState.ConfigureAwait(false);
        if (SignInManager.IsSignedIn(state.User))
        {
            if (HttpContext is null)
            {
                NavigationManager.Refresh(forceReload: true);
                return;
            }

            await SignInManager.SignOutAsync().ConfigureAwait(false);
        }

        string? method = HttpContext?.Request.Method;
        if (HttpContext is not null && HttpMethods.IsPost(method!))
        {
            await SignInAsync().ConfigureAwait(false);

            _persistingSubscription = ComponentState.RegisterOnPersisting(() =>
            {
                ComponentState.PersistAsJson(nameof(Model), Model);
                ComponentState.PersistAsJson(nameof(_errorMessage), _errorMessage);

                return Task.CompletedTask;
            });
        }
        else
        {
            if (ComponentState.TryTakeFromJson(nameof(Model), out SignInModel? persistingModel))
            {
                Model = persistingModel!;
            }
            ComponentState.TryTakeFromJson(nameof(_errorMessage), out _errorMessage);
        }
    }

    private async Task SignInAsync()
    {
        User? user = await UserManager.FindByEmailAsync(Model.User).ConfigureAwait(false);
        user ??= await UserManager.FindByNameAsync(Model.User).ConfigureAwait(false);

        if (user is null)
        {
            _errorMessage = Localizer["signIn_" + SignInResult.Failed];
            return;
        }

        SignInResult result = await SignInManager.PasswordSignInAsync(user, Model.Password, Model.RememberMe, lockoutOnFailure: true).ConfigureAwait(false);

        switch (result)
        {
            case { Succeeded: true }:
                Uri returnUri = NavigationManager.ToAbsoluteUri(ReturnUrl);
                NavigationManager.NavigateTo(returnUri.PathAndQuery);     // prevent a redirect to another domain by using only the path and query part.
                break;
            case { RequiresTwoFactor: true }:
                throw new NotImplementedException("Mfa is currently not implemented.");
                break;
            case { IsLockedOut: true }:
                DateTimeOffset lockOutEnd = (await UserManager.GetLockoutEndDateAsync(user).ConfigureAwait(false)).Value;

                _errorMessage = lockOutEnd < DateTimeOffset.MaxValue     // MaxValue means that the user is locked without an end. It has to unlocked manually.
                    ? Localizer["signIn_LockedOut", lockOutEnd.Humanize()]
                    : Localizer["signIn_LockedOut_NotSpecified"];
                break;
            default:
                _errorMessage = Localizer["signIn_" + result];
                break;
        }
    }

    private void Input_Changed()
    {
        _errorMessage = null;
    }

    private bool IsInvalid() => _errorMessage is not null;

    private string InvalidClass() => IsInvalid() ? "form-invalid" : string.Empty;

    void IDisposable.Dispose()
    {
        _persistingSubscription?.Dispose();
    }
}
