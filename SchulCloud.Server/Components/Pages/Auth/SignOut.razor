@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using SchulCloud.Database.Models

@page "/auth/signOut"

@attribute [AllowAnonymous]

@inject ILogger<SignOut> _logger
@inject SignInManager<User> _signInManager
@inject UserManager<User> _userManager
@inject NavigationManager _navigationManager

@code {
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState.ConfigureAwait(false);

        if (_signInManager.IsSignedIn(state.User))
        {
            if (HttpContext is null)
            {
                _navigationManager.Refresh(forceReload: true);     // Forces the client to send a GET request which is required for the sign out.
                return;
            }

            await _signInManager.SignOutAsync().ConfigureAwait(false);

            string userId = _userManager.GetUserId(state.User)!;
            _logger.LogDebug("User {id} signed out.", userId);
        }

        _navigationManager.NavigateTo("/auth/signIn");
    }

    protected override bool ShouldRender() => false;
}
