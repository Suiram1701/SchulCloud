using Microsoft.AspNetCore.Identity;
using SchulCloud.Database.Models;
using System.Text;

namespace SchulCloud.Server.Identity.EmailSenders;

/// <summary>
/// Provides a email sender that generates a localized UI for the sendet emails
/// </summary>
public abstract class EmailSenderBase(ILogger logger) : IEmailSender<User>
{
    protected ILogger _logger = logger;

    // A real UI and localization will be implemented later.
    public virtual async Task SendConfirmationLinkAsync(User user, string email, string confirmationLink)
    {
        await ExecuteInternalAsync(user, email, "confirm your email", $"The user {user.UserName} requested a confirmation of this email. Confirm by open {confirmationLink}");
    }

    public virtual async Task SendPasswordResetCodeAsync(User user, string email, string resetCode)
    {
        await ExecuteInternalAsync(user, email, "reset your password", $"The user {user.UserName} requested a password reset of his account. The reset code is {resetCode}. When you doesn't requested a password reset ignore this mail.");
    }

    public virtual async Task SendPasswordResetLinkAsync(User user, string email, string resetLink)
    {
        await ExecuteInternalAsync(user, email, "reset your password", $"The user {user.UserName} requested a password reset of his account. Reset by open {resetLink}. When you doesn't requested a password reset ignore this mail.");
    }

    /// <summary>
    /// Opens a logger scope for sending an email.
    /// </summary>
    /// <param name="user">The user that issued this.</param>
    /// <param name="email">The recipient email.</param>
    /// <returns>The scope.</returns>
    protected IDisposable? OpenLoggerScope(User user, string email) =>
        _logger.BeginScope("Sending an autogenerated email to {mail} issued by {userId}.", email, user.Id);

    /// <summary>
    /// Sends a email
    /// </summary>
    /// <param name="user">The user that triggered this email.</param>
    /// <param name="email">The email to sent this mail to.</param>
    /// <param name="subject">The subject of the email.</param>
    /// <param name="content">The raw content of the email</param>
    /// <returns>A task that returns the result of the email sending.</returns>
    protected abstract Task<IdentityResult> ExecuteAsync(User user, string email, string subject, string content);

    private async Task ExecuteInternalAsync(User user, string email, string subject, string content)
    {
        using IDisposable? loggerScope = OpenLoggerScope(user, email);
        try
        {
            IdentityResult result = await ExecuteAsync(user, email, subject, content);
            if (!result.Succeeded)
            {
                StringBuilder sb = new();
                foreach (IdentityError error in result.Errors)
                {
                    sb.AppendLine();
                    sb.AppendFormat("{0}: {1}", error.Code, error.Description);
                }

                _logger.LogError("An error happened while sending the mail. {error}", sb);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error happened while sending the email.");
            throw;
        }
    }
}
