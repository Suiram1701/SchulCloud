@using Humanizer
@using Microsoft.AspNetCore.Identity
@using SchulCloud.Identity.Enums
@using SchulCloud.Frontend.Extensions

<MudPaper Class="px-3 py-3">
    <MudText Class="mb-2" Typo="Typo.h6">@Localizer["signInMethods"]</MudText>
    <MudExpansionPanels Elevation="4">

        @* Password sign in *@
        @if (UserManager.SupportsUserPassword)
        {
            <MudExpansionPanel>
                <TitleContent>
                    <MudStack AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
                        <MudIcon Icon="@MaterialSymbols.Outlined.Password" />
                        <MudText Class="ml-2">@Localizer["signIn_Password"]</MudText>
                        <MudSpacer />

                        @if (_latestUseTimes.TryGetValue(LoginAttemptMethod.Password, out DateTime lastTimeUsed))
                        {
                            <MudText Class="mr-2">@Localizer["method_usedLast", lastTimeUsed.Humanize()]</MudText>
                        }
                    </MudStack>
                </TitleContent>
                <ChildContent>
                    <MudText Typo="Typo.body1">@Localizer["password_Desc"]</MudText>
                    <MudText Class="mt-2 mb-3" Typo="Typo.body2">
                        @{
                            string? ShowWhenTrue(bool condition, Func<IdentityError> errorProvider)
                            {
                                if (condition)
                                {
                                    @errorProvider().Description
                                }
                                return null;
                            }
                            PasswordOptions options = PasswordOptionsAccessor.Value;
                        }

                        @ErrorDescriber.PasswordTooShort(options.RequiredLength).Description<br />
                        @ErrorDescriber.PasswordRequiresUniqueChars(options.RequiredUniqueChars).Description<br />
                        @ShowWhenTrue(options.RequireNonAlphanumeric, ErrorDescriber.PasswordRequiresNonAlphanumeric)<br />
                        @ShowWhenTrue(options.RequireLowercase, ErrorDescriber.PasswordRequiresLower)<br />
                        @ShowWhenTrue(options.RequireUppercase, ErrorDescriber.PasswordRequiresUpper)<br />
                        @ShowWhenTrue(options.RequireDigit, ErrorDescriber.PasswordRequiresDigit)
                    </MudText>

                    <MudStack Spacing="1" Wrap="Wrap.Wrap" Row>
                        <MudButton Color="Color.Primary" Href="@Routes.ChangePassword()">@Localizer["password_ChangeBtn"]</MudButton>
                        <MudButton Color="Color.Error" Href="@Routes.ResetPassword(returnUrl: NavigationManager.GetRelativeUri())">
                            @Localizer["password_ResetBtn"]
                        </MudButton>
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>
        }

        @* Passkey sign in *@
        @if (UserManager.SupportsUserPasskeys)
        {
            <MudExpansionPanel>
                <TitleContent>
                    <MudStack AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
                        <MudIcon Icon="@MaterialSymbols.Outlined.Passkey" />
                        <MudText Class="ml-2">@Localizer["signIn_Passkey"]</MudText>

                        @if (_passkeysEnabled)
                        {
                            <MudChip T="string" Color="Color.Tertiary" Size="Size.Small">@Localizer["method_Enabled"]</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Error" Size="Size.Small">@Localizer["method_Disabled"]</MudChip>
                        }
                        <MudSpacer />

                        @if (_latestUseTimes.TryGetValue(LoginAttemptMethod.Passkey, out DateTime lastTimeUsed))
                        {
                            <MudText Class="mr-2">@Localizer["method_usedLast", lastTimeUsed.Humanize()]</MudText>
                        }
                    </MudStack>
                </TitleContent>
                <ChildContent>
                    <MudText Class="mb-3" Typo="Typo.body1">@Localizer["passkey_Desc"]</MudText>

                    <MudStack Spacing="1" Wrap="Wrap.Wrap" Row>
                        @if (_passkeysEnabled)
                        {
                            <MudButton Color="Color.Error" OnClick="@(async () => await SetPasskeysEnabled_ClickAsync(false))">@Localizer["disableBtn"]</MudButton>
                        }
                        else
                        {
                            <MudTooltip Text="@Localizer["passkey_AtLeastOne"]" Disabled="@(_passkeysCount > 0)">
                                <MudButton Color="Color.Primary" OnClick="@(async () => await SetPasskeysEnabled_ClickAsync(true))" Disabled="@(_passkeysCount <= 0)">
                                    @Localizer["enableBtn"]
                                </MudButton>
                            </MudTooltip>
                        }

                        <MudButton Color="Color.Secondary" Href="@Routes.SecurityKeys()">
                            @Localizer["securityKey_ManageBtn"]
                        </MudButton>
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>

    @if (UserManager.SupportsUserTwoFactor)
    {
        <MudText Class="mt-7" Typo="Typo.h6">@Localizer["mfaMethods"]</MudText>
        <MudText Class="my-2" Typo="Typo.body1">@Localizer["mfa_Desc"]</MudText>

        <MudExpansionPanels Elevation="4">

            @* App 2FA *@
            @if (UserManager.SupportsUserAuthenticatorKey)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <MudStack AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
                            <MudIcon Icon="@MaterialSymbols.Outlined.QrCodeScanner" />
                            <MudText Class="ml-2">@Localizer["mfa_Authenticator"]</MudText>

                            @if (_mfaEnabled)
                            {
                                <MudChip T="string" Color="Color.Tertiary" Size="Size.Small">@Localizer["method_Enabled"]</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">@Localizer["method_Disabled"]</MudChip>
                            }
                            <MudSpacer />

                            @if (_latestUseTimes.TryGetValue(LoginAttemptMethod.TwoFactorAuthenticator, out DateTime lastTimeUsed))
                            {
                                <MudText Class="mr-2">@Localizer["method_usedLast", lastTimeUsed.Humanize()]</MudText>
                            }
                        </MudStack>
                    </TitleContent>
                    <ChildContent>
                        <MudText Class="mb-3" Typo="Typo.body1">@Localizer["authenticator_Desc"]</MudText>

                        @if (_mfaEnabled)
                        {
                            <MudButton Color="Color.Error" OnClick="AuthenticatorDisable_ClickAsync">@Localizer["authenticator_DisableBtn"]</MudButton>
                        }
                        else
                        {
                            <MudButton Color="Color.Primary" Href="@Routes.Authenticator()">@Localizer["authenticator_EnableBtn"]</MudButton>
                        }
                    </ChildContent>
                </MudExpansionPanel>
            }

            @* Email 2FA *@
            @if (UserManager.SupportsUserTwoFactorEmail)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <MudStack AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
                            <MudIcon Icon="@MaterialSymbols.Outlined.Mail" />
                            <MudText Class="ml-2">@Localizer["mfa_Email"]</MudText>

                            @if (_mfaEmailEnabled)
                            {
                                <MudChip T="string" Color="Color.Tertiary" Size="Size.Small">@Localizer["method_Enabled"]</MudChip>
                            }
                            else if (_mfaEnabled)
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">@Localizer["method_Disabled"]</MudChip>
                            }
                            <MudSpacer />

                            @if (_latestUseTimes.TryGetValue(LoginAttemptMethod.TwoFactorEmail, out DateTime lastTimeUsed))
                            {
                                <MudText Class="mr-2">@Localizer["method_usedLast", lastTimeUsed.Humanize()]</MudText>
                            }
                        </MudStack>
                    </TitleContent>
                    <ChildContent>
                        <MudText Class="mb-3" Typo="Typo.body1">@Localizer["email_Desc"]</MudText>

                        @if (_mfaEmailEnabled)
                        {
                            <MudButton Color="Color.Error" OnClick="@(async () => await SetEmailEnabled_ClickAsync(false))">@Localizer["disableBtn"]</MudButton>
                        }
                        else
                        {
                            <MudTooltip Text="@Localizer["authenticator_EnableFirst"]" Disabled="_mfaEnabled">
                                <MudButton Color="Color.Primary" OnClick="@(async () => await SetEmailEnabled_ClickAsync(true))" Disabled="!_mfaEnabled">@Localizer["enableBtn"]</MudButton>
                            </MudTooltip>
                        }
                    </ChildContent>
                </MudExpansionPanel>
            }

            @* Security key 2FA *@
            @if (UserManager.SupportsUserTwoFactorSecurityKeys)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <MudStack AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
                            <MudIcon Icon="@MaterialSymbols.Outlined.Passkey" />
                            <MudText Class="ml-2">@Localizer["mfa_SecurityKey"]</MudText>

                            @if (_mfaSecurityKeyEnabled)
                            {
                                <MudChip T="string" Color="Color.Tertiary" Size="Size.Small">@Localizer["method_Enabled"]</MudChip>
                            }
                            else if (_mfaEnabled)
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">@Localizer["method_Disabled"]</MudChip>
                            }
                            <MudSpacer />

                            @if (_latestUseTimes.TryGetValue(LoginAttemptMethod.TwoFactorSecurityKey, out DateTime lastTimeUsed))
                            {
                                <MudText Class="mr-2">@Localizer["method_usedLast", lastTimeUsed.Humanize()]</MudText>
                            }
                        </MudStack>
                    </TitleContent>
                    <ChildContent>
                        <MudText Class="mb-3" Typo="Typo.body1">@Localizer["securityKey_Desc"]</MudText>


                        <MudStack Spacing="1" Wrap="Wrap.Wrap" Row>
                            @if (_mfaSecurityKeyEnabled)
                            {
                                <MudButton Color="Color.Error" OnClick="@(async () => await SetSecurityKeyEnabled_ClickAsync(false))">@Localizer["disableBtn"]</MudButton>
                            }
                            else
                            {
                                <MudTooltip Text="@Localizer["authenticator_EnableFirst"]" Disabled="_mfaEnabled">
                                    <MudTooltip Text="@Localizer["securityKey_AtLeastOne"]" Disabled="@(_securityKeysCount > 0)">
                                        <MudButton Color="Color.Primary" OnClick="@(async () => await SetSecurityKeyEnabled_ClickAsync(true))" Disabled="@(!_mfaEnabled || _securityKeysCount == 0)">
                                            @Localizer["enableBtn"]
                                        </MudButton>
                                    </MudTooltip>
                                </MudTooltip>
                            }

                            <MudButton Color="Color.Secondary" Href="@Routes.SecurityKeys()">
                                @Localizer["securityKey_ManageBtn"]
                            </MudButton>
                        </MudStack>
                    </ChildContent>
                </MudExpansionPanel>
            }

            @* Recovery code 2FA *@
            @if (UserManager.SupportsUserTwoFactorRecoveryCodes)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <MudStack AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
                            <MudIcon Icon="@MaterialSymbols.Outlined.Pin" />
                            <MudText Class="ml-2">@Localizer["mfa_Recovery"]</MudText>

                            @if (_mfaRemainingRecoveryCodes > 0)
                            {
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">@Localizer["recovery_ValidCodes", _mfaRemainingRecoveryCodes]</MudChip>
                            }
                            else if (_mfaEnabled)
                            {
                                <MudTooltip Text="@Localizer["recovery_NoValidCodes_Tooltip"]">
                                    <MudChip T="string" Color="Color.Warning" Size="Size.Small">@Localizer["recovery_NoValidCodes"]</MudChip>
                                </MudTooltip>
                            }
                            <MudSpacer />

                            @if (_latestUseTimes.TryGetValue(LoginAttemptMethod.TwoFactorRecoveryCode, out DateTime lastTimeUsed))
                            {
                                <MudText Class="mr-2">@Localizer["method_usedLast", lastTimeUsed.Humanize()]</MudText>
                            }
                        </MudStack>
                    </TitleContent>
                    <ChildContent>
                        <MudText Class="mb-3" Typo="Typo.body1">@Localizer["recovery_Desc"]</MudText>

                        <MudTooltip Text="@Localizer["authenticator_EnableFirst"]" Disabled="_mfaEnabled">
                            @if (_mfaRemainingRecoveryCodes == 0)
                            {
                                <MudButton Color="Color.Primary" Href="@Routes.Recovery()" Disabled="!_mfaEnabled">
                                    @Localizer["recovery_GenerateNewBtn"]
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Color="Color.Primary" OnClick="GenerateNewRecoveryCodes_ClickAsync" Disabled="!_mfaEnabled">
                                    @Localizer["recovery_RenewBtn"]
                                </MudButton>
                            }
                        </MudTooltip>
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>

        <MudText Class="mt-4" Typo="Typo.body1">@Localizer["mfaForgetClient_Desc"]</MudText>
        <MudButton Color="Color.Error" OnClick="@(() => NavigationManager.NavigateToSecurityOverview(forget2faClient: true, forceLoad: true))">
            @Localizer["mfaForgetClient"]
        </MudButton>
    }
</MudPaper>